{% extends 'base.html.twig' %}

{% block body %}
    <body>
    <br><br><br>
    <div class="left-align">
    <div id="modal1" class="modal">
        {{ render(controller("AppBundle:Groupe:newModal")) }}
    </div>
    </div>
    <div class="row center">
        <div class="col s12 m4 l2">
            <a class="waves-effect waves-light btn modal-trigger" href="#modal1" style="margin-left: 5px; ">Nouveau groupe</a>
        </div>
        <div class="col s12 m4 l8">

            <div class="md-stepper-horizontal active">

                <div class="md-step col s4 m4 18 step1 active">
                    <div class="md-step-circle"><span>1</span></div>
                    <div class="md-step-title">Plat</div>
                    <div class="md-step-optional">-</div>
                    <div class="md-step-bar-left"></div>
                    <div class="md-step-bar-right"></div>
                </div>
                <div class="md-step col s4 m4 18 active step2 active">
                    <div class="md-step-circle"><span>2</span></div>
                    <div class="md-step-title">Rendez-vous</div>
                    <div class="md-step-optional">-</div>
                    <div class="md-step-bar-left"></div>
                    <div class="md-step-bar-right"></div>
                </div>
                <div class="md-step col s4 m4 18 step3 active">
                    <div class="md-step-circle"><span>3</span></div>
                    <div class="md-step-title">Confirmation</div>
                    <div class="md-step-optional">-</div>
                    <div class="md-step-bar-left"></div>
                    <div class="md-step-bar-right"></div>
                </div>
            </div>



            <div id="desc" class="container">
                <h5 class="light">Poster un plat</h5>
                <br><br>
                {{ form_start(form) }}
                {{ form_widget(form) }}
                <br><br><br>
                <div class=" waves-effect waves-light btn light">
                    <input class="submit next-step" type="submit" value="Poster"/>
                </div>
                {{ form_end(form) }}
            </div>
        </div>
        <div class="col s12 m4 l2"></div>
    </div>
    <ul class="center">
        <li>
            <a class="ret" href="{{ path('plat_index') }}">Retour</a>
        </li>
    </ul>
<br><br>
</body>
    {% block javascripts %}
        {{ parent() }}
        <script>
            $(document).ready(function () {
                /*$( "form" ).submit(function( event ) {
                    swal("Good job!", "Vous venez d'ajouter un plat!", "success");
                });*/

                $('#add_step_new_plat_plat_categorie').select2({
                    width: '100%'
                });
                $('#add_step_new_plat_plat_groupe').select2({
                    width: '100%'
                });
            //    $('#add_step_new_reservation_reservation_date_time_hour').select2({
            //        width: '100%'
            //    });
            //    $('#add_step_new_reservation_reservation_date_time_minute').select2({
            //        width: '100%'
            //    });
                $("#add_step_new_reservation_reservation_date").val("");
                $('#add_step_new_reservation_reservation_date').pickatime({
                    default: 'now',
                 //   min: new Date(2015,3,20),
                 //   max: new Date(2015,7,14),
                    min: 'now',
                    max: 'now +1 days',
                    fromnow: 0,       // set default time to * milliseconds from now (using with default = 'now')
                    twelvehour: false, // Use AM/PM or 24-hour format
                    donetext: 'OK', // text for done-button
                    cleartext: 'Clear', // text for clear-button
                    canceltext: 'Cancel', // Text for cancel-button
                    autoclose: false, // automatic close timepicker
                    ampmclickable: true, // make AM PM clickable
                    aftershow: function(){} //Function for after opening timepicker
                });
                $('.modal').modal();
                changementStepper();
            });


            function changementStepper() {

               if($('#add_step_new_plat').length){
                   $('.step1').addClass('editable');
                   $('.step1 .md-step-bar-right').addClass('step-bar-active');
                   //$('.step1 .md-step-bar-left').addClass('step-bar-active');

             }
              else if($('#add_step_new_reservation').length){
                    $('.step1').addClass('done');
                    $('.step2').addClass('editable');
                   $('.step1 .md-step-bar-right').addClass('step-bar-finish');

                   $('.step2 .md-step-bar-left').addClass('step-bar-finish');
                   $('.step2 .md-step-bar-right').addClass('step-bar-active');
                }
                else{
                   $('.step1').addClass('done');
                    $('.step2').addClass('done');
                    $('.step3').addClass('done');

                   $('.step1 .md-step-bar-right').addClass('step-bar-finish');

                   $('.step2 .md-step-bar-left').addClass('step-bar-finish');
                   $('.step2 .md-step-bar-right').addClass('step-bar-finish');

                   $('.step3 .md-step-bar-left').addClass('step-bar-active');

                }
            }

        </script>



        <script type="text/javascript">
            var placeSearch, autocomplete;
            var componentResolver = {
                street_number: 'add_step_new_reservation_reservation_num',
                route: 'add_step_new_reservation_reservation_adresse',
                locality: 'add_step_new_reservation_reservation_ville',
                postal_code: 'add_step_new_reservation_reservation_cp'
            };
            var componentForm = {
                add_step_new_reservation_reservation_num: 'short_name',
                add_step_new_reservation_reservation_adresse: 'long_name',
                add_step_new_reservation_reservation_ville: 'long_name',
                add_step_new_reservation_reservation_cp: 'short_name'
            };



            function initAutocomplete() {
                // Create the autocomplete object, restricting the search to geographical
                // location types.
                autocomplete = new google.maps.places.Autocomplete((document.getElementById('add_step_new_reservation_search')),
                    {types: ['geocode']});

                // When the user selects an address from the dropdown, populate the address
                // fields in the form.
                autocomplete.addListener('place_changed', fillInAddress);
            }

            function fillInAddress() {
                // Get the place details from the autocomplete object.
                var place = autocomplete.getPlace();
                for (var component in componentForm) {
                    document.getElementById(component).value = '';
                    document.getElementById(component).disabled = false;
                }

                // Get each component of the address from the place details
                // and fill the corresponding field on the form.
                for (var i = 0; i < place.address_components.length; i++) {
                    var addressType = place.address_components[i].types[0];
                    if (componentForm[componentResolver[addressType]]) {
                        var val = place.address_components[i][componentForm[componentResolver[addressType]]];
                        document.getElementById(componentResolver[addressType]).value = val;

                    }
                }
            }

            // Bias the autocomplete object to the user's geographical location,
            // as supplied by the browser's 'navigator.geolocation' object.
            document.getElementById('add_step_new_reservation_search').onfocus = function geolocate() {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(function(position) {
                        var geolocation = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };
                        var circle = new google.maps.Circle({
                            center: geolocation,
                            radius: position.coords.accuracy
                        });
                        autocomplete.setBounds(circle.getBounds());
                    });
                }
            }

        </script>


        <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBZp6Z4MQBZsENJAfEMP-Dd0X3TTl5IHQE&libraries=places&location=48.85661400000001,2.3522219000000177&radius=110000&strictbounds&callback=initAutocomplete" async="" defer=""></script>
    {% endblock %}
{% endblock %}


